version: 0.2

env:
  variables:
    SERVERLESS_ACCESS_KEY: "AKH0BPKbz2RQUgkNr4unbgVJqMJVCEtsq22E7ACnKVv8Z"  # Replace with the actual Serverless access key

phases:
  install:
    runtime-versions:
      python: 3.11
      nodejs: 18
    commands:
      - echo "============================================="
      - echo "Verifying Node.js and npm versions:"
      - node -v && npm -v
      - echo "Clearing NPM cache..."
      - npm cache clean --force
      - echo "Installing Serverless Framework..."
      - npm install -g serverless
      - echo "Installing required plugins..."
      - npm install serverless-deployment-bucket
      - serverless --version
      - echo "============================================="
      - echo "Installing envsubst for placeholder replacement..."
      - yum install -y gettext

  build:
    commands:
      - echo "DEBUG - Checking STAGE variable - '$STAGE'"
      - export SERVERLESS_ACCESS_KEY=${SERVERLESS_ACCESS_KEY}

      - echo "Zipping the Lambda function..."
      - cd src && zip -r ../patient_record_service.zip . && cd ..

      - echo "Deploying Lambda with Serverless Framework..."
      - serverless deploy --stage $STAGE

      - echo "Publishing Lambda function version..."
      - LAMBDA_VERSION=$(aws lambda publish-version --function-name patient-record-service-$STAGE --query Version --output text || echo "FAILED")
      - if [ "$LAMBDA_VERSION" = "FAILED" ]; then
          echo "ERROR - Failed to publish Lambda version. Exiting.";
          exit 1;
        fi
      - echo "Lambda version published - $LAMBDA_VERSION"

      - echo "Verifying Lambda function version..."
      - aws lambda list-versions-by-function --function-name patient-record-service-$STAGE
      - echo "Adding delay to ensure version availability..."
      - sleep 10

      - echo "Creating/Updating Lambda alias..."
      - aws lambda update-alias --function-name patient-record-service-$STAGE --name $STAGE --function-version $LAMBDA_VERSION || aws lambda create-alias --function-name patient-record-service-$STAGE --name $STAGE --function-version $LAMBDA_VERSION
      - echo "Lambda alias '$STAGE' updated to version - $LAMBDA_VERSION"

      - echo "Updating AppSpec file with STAGE and VERSION..."
      - export STAGE=$STAGE
      - export VERSION=$LAMBDA_VERSION
      - envsubst < appspec.yml > appspec-resolved.yml
      - mv appspec-resolved.yml appspec.yml
      - echo "Updated AppSpec.yml:"
      - cat appspec.yml

artifacts:
  files:
    - appspec.yml
    - patient_record_service.zip
  discard-paths: yes